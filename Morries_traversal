/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        TreeNode * curr = root;
        vector<int>ans;
        while(curr){
            
            //if curr left is null then visit node and store it 
            if(curr->left==nullptr){
                ans.push_back(curr->val);
                curr = curr->right;
            }

            else{
                TreeNode * pred = curr->left;
                // if same node hits twice then break that cycle
                while(pred->right!=curr && pred->right){
                    pred = pred->right;
                }
                //pred right is null then move curr to curr left 
                if(pred->right==nullptr){
                    pred->right = curr;
                    curr = curr->left;
                }
                //if it hits twice then break the connection and move curr to right
                else{
                    pred->right = nullptr;
                    ans.push_back(curr->val);
                    curr = curr->right;
                }
            }
        }
        return ans;
    }
};
